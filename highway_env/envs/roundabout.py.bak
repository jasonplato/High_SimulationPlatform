from __future__ import division, print_function, absolute_import
import numpy as np

from highway_env import utils
from highway_env.envs.abstract import AbstractEnv
from highway_env.road.lane import LineType, StraightLane, SineLane, LanesConcatenation, CircularLane
from highway_env.road.road import Road
from highway_env.vehicle.control import ControlledVehicle, MDPVehicle, CarSim, FreeControl
from highway_env.vehicle.behavior import IDMVehicle
from highway_env.vehicle.dynamics import Obstacle
from highway_env.envs.graphics import EnvViewer
import random


def rad(deg):
    return deg * np.pi / 180


class RoundaboutEnv(AbstractEnv):
    COLLISION_REWARD = -1
    HIGH_VELOCITY_REWARD = 0.2
    RIGHT_LANE_REWARD = 0
    LANE_CHANGE_REWARD = -0.05

    DURATION = 11

    DEFAULT_CONFIG = {"other_vehicles_type": "highway_env.vehicle.behavior.IDMVehicle",
                      # "incoming_vehicle_destination": None,
                      "centering_position": [0.5, 0.6]}

    def __init__(self):
        super(RoundaboutEnv, self).__init__()
        self.config = self.DEFAULT_CONFIG.copy()
        self.steps = 0
        self.switch = False
        self.reset()
        EnvViewer.SCREEN_HEIGHT = 1000

    def configure(self, config):
        self.config.update(config)

    def _observation(self):
        return super(RoundaboutEnv, self)._observation()

    def _reward(self, action):
        reward = self.COLLISION_REWARD * self.vehicle.crashed \
                 + self.HIGH_VELOCITY_REWARD * self.vehicle.velocity_index / max(self.vehicle.SPEED_COUNT - 1, 1) \
                 + self.LANE_CHANGE_REWARD * (action in [0, 2])
        # return utils.remap(reward, [self.COLLISION_REWARD+self.LANE_CHANGE_REWARD, self.HIGH_VELOCITY_REWARD], [0, 1])
        return reward

    def _is_terminal(self):
        """
            The episode is over when a collision occurs or when the access ramp has been passed.
        """
        return self.vehicle.crashed or self.steps >= self.DURATION

    def reset(self):
        self._make_road()
        self._make_vehicles()
        self.steps = 0
        # print("len of vehicles:", len(self.vehicle), "\n")
        return self._observation()

    def step(self, action):
        self.steps += 1
        return super(RoundaboutEnv, self).step(action)

    def _make_road(self):
        # Circle lanes: (s)outh/(e)ast/(n)orth/(w)est (e)ntry/e(x)it.
        center = [0, 0]  # [m]
        radius = 30  # [m]
        alpha = 20  # [deg]
        # net = RoadNetwork()
        radii = [radius, radius + 4]
        n, c, s = LineType.NONE, LineType.CONTINUOUS, LineType.STRIPED
        line = [[c, s], [n, c]]
        r = []
        bounds = [30 * 50 * np.pi / 180, 30 * 40 * np.pi / 180, 34 * 50 * np.pi / 180, 34 * 40 * np.pi / 180]
        # bounds = [30 * 2 * np.pi, 34 * 2 * np.pi ]
        for lane in [0, 1]:
            # net.add_lane("se", "ex",
            # CircularLane(center, radii[lane], rad(90 - alpha), rad(alpha), line_types=line[lane]))
            # net.add_lane("ex", "ee", CircularLane(center, radii[lane], rad(alpha), rad(-alpha), line_types=line[lane]))
            # net.add_lane("ee", "nx",
            # CircularLane(center, radii[lane], rad(-alpha), rad(-90 + alpha), line_types=line[lane]))
            # net.add_lane("nx", "ne",
            # CircularLane(center, radii[lane], rad(-90 + alpha), rad(-90 - alpha), line_types=line[lane]))
            # net.add_lane("ne", "wx",
            # CircularLane(center, radii[lane], rad(-90 - alpha), rad(-180 + alpha), line_types=line[lane]))
            # net.add_lane("wx", "we",
            # CircularLane(center, radii[lane], rad(-180 + alpha), rad(-180 - alpha), line_types=line[lane]))
            # net.add_lane("we", "sx",
            # CircularLane(center, radii[lane], rad(180 - alpha), rad(90 + alpha), line_types=line[lane]))
            # net.add_lane("sx", "se",
            # CircularLane(center, radii[lane], rad(90 + alpha), rad(90 - alpha), line_types=line[lane]))

            circul1 = CircularLane(center, radii[lane], rad(90 - alpha), rad(alpha), line_types=line[lane],
                                   bounds=[0, bounds[lane * 2 + 0]])
            circul2 = CircularLane(center, radii[lane], rad(alpha), rad(-alpha), line_types=line[lane],
                                   bounds=[0, bounds[lane * 2 + 1]])
            circul3 = CircularLane(center, radii[lane], rad(-alpha), rad(-90 + alpha), line_types=line[lane],
                                   bounds=[0, bounds[lane * 2 + 0]])
            circul4 = CircularLane(center, radii[lane], rad(-90 + alpha), rad(-90 - alpha), line_types=line[lane],
                                   bounds=[0, bounds[lane * 2 + 1]])
            circul5 = CircularLane(center, radii[lane], rad(-90 - alpha), rad(-180 + alpha), line_types=line[lane],
                                   bounds=[0, bounds[lane * 2 + 0]])
            circul6 = CircularLane(center, radii[lane], rad(-180 + alpha), rad(-180 - alpha), line_types=line[lane],
                                   bounds=[0, bounds[lane * 2 + 1]])
            circul7 = CircularLane(center, radii[lane], rad(180 - alpha), rad(90 + alpha), line_types=line[lane],
                                   bounds=[0, bounds[lane * 2 + 0]])
            circul8 = CircularLane(center, radii[lane], rad(90 + alpha), rad(90 - alpha), line_types=line[lane],
                                   bounds=[0, bounds[lane * 2 + 1]])

            # circul1 = CircularLane(center, radii[lane], rad(0), rad(360), line_types=line[lane],
            # bounds=[0, bounds[lane]])
            r.append(LanesConcatenation([circul1, circul2, circul3, circul4, circul5, circul6, circul7, circul8]))
            # r.append(LanesConcatenation([circul1]))

        access = 200  # [m]
        dev = 120  # [m]
        a = 5  # [m]
        delta_st = 0.20 * dev  # [m]

        # delta_en = dev - delta_st
        w = 2 * np.pi / dev

        # net.add_lane("ser", "ses", StraightLane([2, access], np.pi / 2, line_types=[s, c], bounds=[60, 200]))
        # net.add_lane("ses", "se",
        # SineLane([2 + a, dev / 2], [2 + a, dev / 2 - delta_st], a, w, -np.pi / 2, line_types=[c, c]))
        # net.add_lane("sx", "sxs",
        #  SineLane([-2 - a, -dev / 2 + delta_en], [-2 - a, dev / 2], a, w, -np.pi / 2 + w * delta_en,
        # line_types=[c, c]))
        # net.add_lane("sxs", "sxr", StraightLane([-2, dev / 2], np.pi / 2, line_types=[n, c], bounds=[60, 200]))

        # net.add_lane("eer", "ees", StraightLane([access, -2], np.pi / 2, line_types=[s, c], bounds=[60, 200]))
        # net.add_lane("ees", "ee",
        # SineLane([dev / 2, -2 - a], [dev / 2 - delta_st, -2 - a], a, w, -np.pi / 2, line_types=[c, c]))
        # net.add_lane("ex", "exs",
        # SineLane([-dev / 2 + delta_en, 2 + a], [dev / 2, 2 + a], a, w, -np.pi / 2 + w * delta_en,
        # line_types=[c, c]))
        # net.add_lane("exs", "exr", StraightLane([dev / 2, 2], np.pi / 2, line_types=[n, c], bounds=[60, 200]))

        # net.add_lane("ner", "nes", StraightLane([-2, -access], np.pi / 2, line_types=[s, c], bounds=[-200, -60]))
        # net.add_lane("nes", "ne",
        # SineLane([-2 - a, -dev / 2], [-2 - a, -dev / 2 + delta_st], a, w, -np.pi / 2, line_types=[c, c]))
        # net.add_lane("nx", "nxs",
        # SineLane([2 + a, dev / 2 - delta_en], [2 + a, -dev / 2], a, w, -np.pi / 2 + w * delta_en,
        # line_types=[c, c]))
        # net.add_lane("nxs", "nxr", StraightLane([2, -dev / 2], np.pi / 2, line_types=[n, c], bounds=[-200, -60]))

        straight1 = StraightLane([4, 120], -np.pi / 2, line_types=[s, c], bounds=[0, dev / 2])
        # print("enter straight1")
        sine1 = SineLane(straight1.position(60+delta_st/2, 4), -np.pi / 2, 4.0,a, w, -np.pi / 2,
                         line_types=[c, c], bounds=[-delta_st/2,delta_st/2])
        # print("sine_lane_straight.position:", straight1.position(200, dev / 2))
        se = LanesConcatenation(
            [straight1, sine1])
        # print("enter se")
        straight2 = StraightLane([-4, 60], np.pi / 2, line_types=[c, n], bounds=[0, dev / 2])
        sine2 = SineLane(straight2.position(-24-delta_st/2, -2), np.pi / 2,4.0, a, w,np.pi / 2,
                         line_types=[c, c], bounds=[delta_st*1.5,delta_st/2])
        sx = LanesConcatenation(
            [straight2, sine2])

        straight3 = StraightLane([120, -4], -np.pi, line_types=[s, c], bounds=[0, dev / 2])
        sine3 = SineLane(straight3.position(60+delta_st/2, 4), -np.pi, 4.0, a, w, -np.pi / 2,
                         line_types=[c, c], bounds=[-delta_st/2,delta_st/2])
        ee = LanesConcatenation(
            [straight3, sine3])
        straight4 = StraightLane([60, 4], 0, line_types=[c, n], bounds=[0, dev / 2])
        sine4 = SineLane(straight4.position(-24-delta_st/2, -2), 0, 4.0, a, w,np.pi / 2,
                         line_types=[c, c], bounds=[delta_st*1.5,delta_st/2])
        ex = LanesConcatenation(
            [straight4, sine4])

        straight5 = StraightLane([-4, -120], np.pi / 2, line_types=[s, c], bounds=[0, dev / 2])
        sine5 = SineLane(straight5.position(60, 5), np.pi / 2, 4.0, a, w, -np.pi / 2,
                         line_types=[c, c], bounds=[0, delta_st])
        ne = LanesConcatenation(
            [straight5, sine5])
        straight6 = StraightLane([4, -60], -np.pi / 2, line_types=[c, n], bounds=[0, dev / 2])
        sine6 = SineLane(straight6.position(-24, -5), -np.pi / 2, 4.0,a, w,np.pi / 2,
                         line_types=[c, c], bounds=[0, delta_st])
        nx = LanesConcatenation(
            [straight6,sine6])

        straight7 = StraightLane([-120, 0], 0, line_types=[s, c], bounds=[0, dev / 2])
        sine7 = SineLane(straight7.position(60, 5), 0,4.0, a, w,-np.pi / 2,
                         line_types=[c, c], bounds=[0, delta_st])
        we = LanesConcatenation(
            [straight7, sine7])
        straight8 = StraightLane([-60, -4], -np.pi, line_types=[n, c], bounds=[0, dev / 2])
        sine8 = SineLane(straight8.position(-24, -1), -np.pi,4.0, a, w,  np.pi / 2,
                         line_types=[c, c], bounds=[0, delta_st])
        wx = LanesConcatenation(
            [straight8,sine8])

        road = Road(lanes=[r[0], r[1], se, sx, ee, ex, ne, nx, we, wx], np_random=self.np_random)
        self.road = road

        # print("lanes:\n", self.road.lanes)

    def _make_vehicles(self):
        """
            Populate a road with several vehicles on the highway and on the merging lane, as well as an ego-vehicle.
        :return: the ego-vehicle
        """
        """
        road = self.road
        other_vehicles_type = utils.class_from_path(self.config["other_vehicles_type"])
        car_number_each_lane = 5
        # reset_position_range = (30, 40)
        reset_position_range = (100, 0)
        # reset_lane = random.choice(road.lanes)

        for l in road.lanes[:3]:
            reset_lane = road.lanes[2]
            cars_on_lane = car_number_each_lane
            reset_position = (32, 0)
            if l is reset_lane:
                cars_on_lane += 1
                # reset_position = random.choice(range(5, 6))

        # github-version
        position_deviation = 2
        velocity_deviation = 2

        # Ego-vehicle
        # ego_lane = self.road.network.get_lane(("ser", "ses", 0))
        ego_lane = self.road.get_lane((100, 0))
        print("\nego_lane.position:", ego_lane.position(140, 0), "\n")
        # ego_vehicle = MDPVehicle(self.road,
        # ego_lane.position(140, 0),
        # velocity=5,
        # heading=ego_lane.heading_at(140)).plan_route_to("nxs")
        ego_vehicle = IDMVehicle(road, (60, 0), np.pi / 2, velocity=10, max_length=500)
        # MDPVehicle.SPEED_MIN = 0
        # MDPVehicle.SPEED_MAX = 15
        # MDPVehicle.SPEED_COUNT = 4

        self.road.vehicles.append(ego_vehicle)
        self.vehicle = ego_vehicle

        # Incoming vehicle
        # destinations = ["exr", "sxr", "nxr"]
        other_vehicles_type = utils.class_from_path(self.config["other_vehicles_type"])
        vehicle = other_vehicles_type.make_on_lane(self.road,
                                                   (0, 30),
                                                   longitudinal=5 + self.np_random.randn() * position_deviation,
                                                   velocity=16 + self.np_random.randn() * velocity_deviation)
        # if self.config["incoming_vehicle_destination"] is not None:
        # destination = destinations[self.config["incoming_vehicle_destination"]]
        # else:
        # destination = self.np_random.choice(destinations)

        # vehicle.plan_route_to(destination)
        # vehicle.randomize_behavior()
        self.road.vehicles.append(vehicle)

        # Other vehicles
        for i in list(range(1, 2)) + list(range(-1, 0)):
            vehicle = other_vehicles_type.make_on_lane(self.road,
                                                       (30 * i, 0),
                                                       longitudinal=20 * i + self.np_random.randn() * position_deviation,
                                                       velocity=16 + self.np_random.randn() * velocity_deviation)
            # vehicle.plan_route_to(self.np_random.choice(destinations))
            # vehicle.randomize_behavior()
            self.road.vehicles.append(vehicle)

        # Entering vehicle
        # vehicle = other_vehicles_type.make_on_lane(self.road,
                                                   # ("eer", "ees", 0),
                                                   # longitudinal=50 + self.np_random.randn() * position_deviation,
                                                   # velocity=16 + self.np_random.randn() * velocity_deviation)
        # vehicle.plan_route_to(self.np_random.choice(destinations))
        # vehicle.randomize_behavior()
        # self.road.vehicles.append(vehicle)

        vehicle = MDPVehicle.create_random(self.road, 25, spacing=3, np_random=self.np_random)
        self.road.vehicles.append(vehicle)
        for v in self.road.vehicles:
            lane_index = v.lane_index
            self.road.lanes[lane_index].vehicles.append(v)
        """
        other_vehicles_mandatory = False
        max_l = 700
        road = self.road
        other_vehicles_type = utils.class_from_path(self.config["other_vehicles_type"])
        car_number_each_lane = 2
        # reset_position_range = (30, 40)
        reset_position_range = (10, 20)
        # reset_lane = random.choice(road.lanes)
        reset_lane = road.lanes[2]
        ego_vehicle = None
        num = 0
        for l in road.lanes[2:]:
            cars_on_lane = car_number_each_lane
            reset_position = None
            if l is reset_lane:
                cars_on_lane += 1
                reset_position = random.choice(range(0, 6))
                # reset_position = 2
            for i in range(cars_on_lane):
                if i == reset_position and not ego_vehicle:
                    if self.switch:
                        ego_vehicle = MDPVehicle(road, (0, 70), heading=-np.pi / 2,
                                                 velocity=10, max_length=max_l)
                    else:
                        ego_vehicle = IDMVehicle(road, (0, 70), heading=-np.pi / 2,
                                                 velocity=10, max_length=max_l)
                        ego_vehicle.destination = 1
                        ego_vehicle.id = 0
                    road.vehicles.append(ego_vehicle)
                    self.vehicle = ego_vehicle
                    l.vehicles.append(ego_vehicle)
                else:

                    if 2 == num:
                        car = other_vehicles_type(road, (100 - i * 15, -3), heading=-np.pi,
                                                  velocity=np.random.randint(5, 10), dst=2, max_length=max_l)
                        if other_vehicles_mandatory:
                            car.destination = 1
                        road.vehicles.append(car)
                        l.vehicles.append(car)
                    elif 6 == num:
                        car = other_vehicles_type(road, (-100 + i * 15, 0), heading=0,
                                                  velocity=np.random.randint(5, 10), dst=2, max_length=max_l)
                        if other_vehicles_mandatory:
                            car.destination = 1
                        road.vehicles.append(car)
                        l.vehicles.append(car)
                    else:
                        pass
                    # if other_vehicles_mandatory:
                    # car.destination = 1
                    # road.vehicles.append(car)
                    # l.vehicles.append(car)
            num += 1
        # print("make_vehicle finish")
        for lane in road.lanes:
            # print("lane:", lane.LANEINDEX, "\n")
            lane.vehicles = sorted(lane.vehicles, key=lambda x: lane.local_coordinates(x.position)[0])
            # print("len of lane.vehicles:", len(lane.vehicles), "\n")
            for i, v in enumerate(lane.vehicles):
                # print("i:",i,"\n")
                v.vehicle_index_in_line = i
